/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  GovindaDAO,
  GovindaDAOInterface,
} from "../../contracts/GovindaDAO";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "treasuryAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "createProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "executeProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nextProposalId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "votes",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract GovindaToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "contract Treasury",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014703803806200147083398181016040528101906200003791906200016f565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b6565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b60006200013782620000c5565b9050919050565b62000149816200012a565b81146200015557600080fd5b50565b60008151905062000169816200013e565b92915050565b60008060408385031215620001895762000188620000c0565b5b6000620001998582860162000113565b9250506020620001ac8582860162000158565b9150509250929050565b6112aa80620001c66000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80632ab09d141161005b5780632ab09d14146100ef57806361d027b31461010d578063cca5a8b21461012b578063fc0c546a146101475761007d565b80630121b93f14610082578063013cf08b1461009e5780630d61b519146100d3575b600080fd5b61009c600480360381019061009791906107da565b610165565b005b6100b860048036038101906100b391906107da565b610367565b6040516100ca96959493929190610902565b60405180910390f35b6100ed60048036038101906100e891906107da565b610458565b005b6100f7610679565b604051610104919061096a565b60405180910390f35b61011561067f565b60405161012291906109e4565b60405180910390f35b61014560048036038101906101409190610b60565b6106a5565b005b61014f61076c565b60405161015c9190610c02565b60405180910390f35b60006003600083815260200190815260200160002090508060060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561020b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020290610c69565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102679190610caa565b602060405180830381865afa158015610284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a89190610cda565b9050600081116102ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e490610d53565b60405180910390fd5b60018260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508082600401600082825461035b9190610da2565b92505081905550505050565b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030180546103bc90610e05565b80601f01602080910402602001604051908101604052809291908181526020018280546103e890610e05565b80156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff16905086565b60006003600083815260200190815260200160002090508060050160009054906101000a900460ff16156104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890610e82565b60405180910390fd5b600260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190610cda565b61055c9190610ed1565b8160040154116105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059890610f4e565b60405180910390fd5b60018160050160006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a38260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600201546040518363ffffffff1660e01b8152600401610643929190610f8f565b600060405180830381600087803b15801561065d57600080fd5b505af1158015610671573d6000803e3d6000fd5b505050505050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060036000600254815260200190815260200160002090506002548160000181905550838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082816002018190555081816003019081610726919061115a565b506000816004018190555060008160050160006101000a81548160ff021916908315150217905550600260008154809291906107619061122c565b919050555050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6107b7816107a4565b81146107c257600080fd5b50565b6000813590506107d4816107ae565b92915050565b6000602082840312156107f0576107ef61079a565b5b60006107fe848285016107c5565b91505092915050565b610810816107a4565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061084182610816565b9050919050565b61085181610836565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610891578082015181840152602081019050610876565b60008484015250505050565b6000601f19601f8301169050919050565b60006108b982610857565b6108c38185610862565b93506108d3818560208601610873565b6108dc8161089d565b840191505092915050565b60008115159050919050565b6108fc816108e7565b82525050565b600060c0820190506109176000830189610807565b6109246020830188610848565b6109316040830187610807565b818103606083015261094381866108ae565b90506109526080830185610807565b61095f60a08301846108f3565b979650505050505050565b600060208201905061097f6000830184610807565b92915050565b6000819050919050565b60006109aa6109a56109a084610816565b610985565b610816565b9050919050565b60006109bc8261098f565b9050919050565b60006109ce826109b1565b9050919050565b6109de816109c3565b82525050565b60006020820190506109f960008301846109d5565b92915050565b610a0881610836565b8114610a1357600080fd5b50565b600081359050610a25816109ff565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a6d8261089d565b810181811067ffffffffffffffff82111715610a8c57610a8b610a35565b5b80604052505050565b6000610a9f610790565b9050610aab8282610a64565b919050565b600067ffffffffffffffff821115610acb57610aca610a35565b5b610ad48261089d565b9050602081019050919050565b82818337600083830152505050565b6000610b03610afe84610ab0565b610a95565b905082815260208101848484011115610b1f57610b1e610a30565b5b610b2a848285610ae1565b509392505050565b600082601f830112610b4757610b46610a2b565b5b8135610b57848260208601610af0565b91505092915050565b600080600060608486031215610b7957610b7861079a565b5b6000610b8786828701610a16565b9350506020610b98868287016107c5565b925050604084013567ffffffffffffffff811115610bb957610bb861079f565b5b610bc586828701610b32565b9150509250925092565b6000610bda8261098f565b9050919050565b6000610bec82610bcf565b9050919050565b610bfc81610be1565b82525050565b6000602082019050610c176000830184610bf3565b92915050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b6000610c53600d83610862565b9150610c5e82610c1d565b602082019050919050565b60006020820190508181036000830152610c8281610c46565b9050919050565b6000610c9482610816565b9050919050565b610ca481610c89565b82525050565b6000602082019050610cbf6000830184610c9b565b92915050565b600081519050610cd4816107ae565b92915050565b600060208284031215610cf057610cef61079a565b5b6000610cfe84828501610cc5565b91505092915050565b7f4e6f20766f74696e6720706f7765720000000000000000000000000000000000600082015250565b6000610d3d600f83610862565b9150610d4882610d07565b602082019050919050565b60006020820190508181036000830152610d6c81610d30565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dad826107a4565b9150610db8836107a4565b9250828201905080821115610dd057610dcf610d73565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e1d57607f821691505b602082108103610e3057610e2f610dd6565b5b50919050565b7f416c726561647920657865637574656400000000000000000000000000000000600082015250565b6000610e6c601083610862565b9150610e7782610e36565b602082019050919050565b60006020820190508181036000830152610e9b81610e5f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610edc826107a4565b9150610ee7836107a4565b925082610ef757610ef6610ea2565b5b828204905092915050565b7f4e6f7420656e6f75676820766f74657300000000000000000000000000000000600082015250565b6000610f38601083610862565b9150610f4382610f02565b602082019050919050565b60006020820190508181036000830152610f6781610f2b565b9050919050565b6000610f7982610bcf565b9050919050565b610f8981610f6e565b82525050565b6000604082019050610fa46000830185610f80565b610fb16020830184610807565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261101a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610fdd565b6110248683610fdd565b95508019841693508086168417925050509392505050565b600061105761105261104d846107a4565b610985565b6107a4565b9050919050565b6000819050919050565b6110718361103c565b61108561107d8261105e565b848454610fea565b825550505050565b600090565b61109a61108d565b6110a5818484611068565b505050565b5b818110156110c9576110be600082611092565b6001810190506110ab565b5050565b601f82111561110e576110df81610fb8565b6110e884610fcd565b810160208510156110f7578190505b61110b61110385610fcd565b8301826110aa565b50505b505050565b600082821c905092915050565b600061113160001984600802611113565b1980831691505092915050565b600061114a8383611120565b9150826002028217905092915050565b61116382610857565b67ffffffffffffffff81111561117c5761117b610a35565b5b6111868254610e05565b6111918282856110cd565b600060209050601f8311600181146111c457600084156111b2578287015190505b6111bc858261113e565b865550611224565b601f1984166111d286610fb8565b60005b828110156111fa578489015182556001820191506020850194506020810190506111d5565b868310156112175784890151611213601f891682611120565b8355505b6001600288020188555050505b505050505050565b6000611237826107a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361126957611268610d73565b5b60018201905091905056fea26469706673582212207fba895f47cb3a09a7c3696aace82aaf38a3567a54c52d247e32e650b373077564736f6c63430008180033";

type GovindaDAOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovindaDAOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovindaDAO__factory extends ContractFactory {
  constructor(...args: GovindaDAOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    tokenAddress: AddressLike,
    treasuryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      tokenAddress,
      treasuryAddress,
      overrides || {}
    );
  }
  override deploy(
    tokenAddress: AddressLike,
    treasuryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      tokenAddress,
      treasuryAddress,
      overrides || {}
    ) as Promise<
      GovindaDAO & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GovindaDAO__factory {
    return super.connect(runner) as GovindaDAO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovindaDAOInterface {
    return new Interface(_abi) as GovindaDAOInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): GovindaDAO {
    return new Contract(address, _abi, runner) as unknown as GovindaDAO;
  }
}
